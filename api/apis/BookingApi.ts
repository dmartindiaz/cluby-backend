/* tslint:disable */
/* eslint-disable */
/**
 * MiKloud - Customer Web API
 * This api is for the padelfy backend.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: dmartindiaz3@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BookingInDTO,
  BookingOutDTO,
} from '../models/index';
import {
    BookingInDTOFromJSON,
    BookingInDTOToJSON,
    BookingOutDTOFromJSON,
    BookingOutDTOToJSON,
} from '../models/index';

export interface CreateAreaBookingRequest {
    bookingInDTO: BookingInDTO;
}

export interface DeleteBookingRequest {
    bookingId: string;
}

export interface GetBookingRequest {
    bookingId: string;
}

export interface UpdateBookingRequest {
    bookingId: string;
    bookingInDTO: BookingInDTO;
}

/**
 * 
 */
export class BookingApi extends runtime.BaseAPI {

    /**
     * Create a new booking within a specific area
     * Create booking for an area
     */
    async createAreaBookingRaw(requestParameters: CreateAreaBookingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookingOutDTO>> {
        if (requestParameters['bookingInDTO'] == null) {
            throw new runtime.RequiredError(
                'bookingInDTO',
                'Required parameter "bookingInDTO" was null or undefined when calling createAreaBooking().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bookings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BookingInDTOToJSON(requestParameters['bookingInDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingOutDTOFromJSON(jsonValue));
    }

    /**
     * Create a new booking within a specific area
     * Create booking for an area
     */
    async createAreaBooking(requestParameters: CreateAreaBookingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookingOutDTO> {
        const response = await this.createAreaBookingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific booking by its ID
     * Delete booking by ID
     */
    async deleteBookingRaw(requestParameters: DeleteBookingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['bookingId'] == null) {
            throw new runtime.RequiredError(
                'bookingId',
                'Required parameter "bookingId" was null or undefined when calling deleteBooking().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookings/{bookingId}`.replace(`{${"bookingId"}}`, encodeURIComponent(String(requestParameters['bookingId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific booking by its ID
     * Delete booking by ID
     */
    async deleteBooking(requestParameters: DeleteBookingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBookingRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a specific booking by its ID
     * Get booking by ID
     */
    async getBookingRaw(requestParameters: GetBookingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookingOutDTO>> {
        if (requestParameters['bookingId'] == null) {
            throw new runtime.RequiredError(
                'bookingId',
                'Required parameter "bookingId" was null or undefined when calling getBooking().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookings/{bookingId}`.replace(`{${"bookingId"}}`, encodeURIComponent(String(requestParameters['bookingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingOutDTOFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific booking by its ID
     * Get booking by ID
     */
    async getBooking(requestParameters: GetBookingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookingOutDTO> {
        const response = await this.getBookingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update details of a specific booking by its ID
     * Update booking by ID
     */
    async updateBookingRaw(requestParameters: UpdateBookingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookingOutDTO>> {
        if (requestParameters['bookingId'] == null) {
            throw new runtime.RequiredError(
                'bookingId',
                'Required parameter "bookingId" was null or undefined when calling updateBooking().'
            );
        }

        if (requestParameters['bookingInDTO'] == null) {
            throw new runtime.RequiredError(
                'bookingInDTO',
                'Required parameter "bookingInDTO" was null or undefined when calling updateBooking().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bookings/{bookingId}`.replace(`{${"bookingId"}}`, encodeURIComponent(String(requestParameters['bookingId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BookingInDTOToJSON(requestParameters['bookingInDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingOutDTOFromJSON(jsonValue));
    }

    /**
     * Update details of a specific booking by its ID
     * Update booking by ID
     */
    async updateBooking(requestParameters: UpdateBookingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookingOutDTO> {
        const response = await this.updateBookingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
