/* tslint:disable */
/* eslint-disable */
/**
 * MiKloud - Customer Web API
 * This api is for the padelfy backend.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: dmartindiaz3@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetSpacesFacilities200Response,
  NotificationOutDTO,
  PaginationDTO,
  SimpleUserOutDTO,
  SpaceOutDTO,
} from '../models/index';
import {
    GetSpacesFacilities200ResponseFromJSON,
    GetSpacesFacilities200ResponseToJSON,
    NotificationOutDTOFromJSON,
    NotificationOutDTOToJSON,
    PaginationDTOFromJSON,
    PaginationDTOToJSON,
    SimpleUserOutDTOFromJSON,
    SimpleUserOutDTOToJSON,
    SpaceOutDTOFromJSON,
    SpaceOutDTOToJSON,
} from '../models/index';

export interface DeleteSpaceRequest {
    spaceId: string;
}

export interface GetNotificationSpaceUserRequest {
    spaceId: string;
}

export interface GetSpaceRequest {
    spaceId: string;
}

export interface GetSpaceNotificationRequest {
    spaceId: string;
}

export interface GetSpacesFacilitiesRequest {
    spaceId: string;
    paginationDTO: PaginationDTO;
}

export interface UpdateSpaceRequest {
    spaceId: string;
}

/**
 * 
 */
export class SpaceApi extends runtime.BaseAPI {

    /**
     * Create a new space for the user
     * Create user space
     */
    async createSpaceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SpaceOutDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/spaces`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpaceOutDTOFromJSON(jsonValue));
    }

    /**
     * Create a new space for the user
     * Create user space
     */
    async createSpace(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SpaceOutDTO> {
        const response = await this.createSpaceRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete a user space
     * Delete user space
     */
    async deleteSpaceRaw(requestParameters: DeleteSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['spaceId'] == null) {
            throw new runtime.RequiredError(
                'spaceId',
                'Required parameter "spaceId" was null or undefined when calling deleteSpace().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/spaces/{spaceId}`.replace(`{${"spaceId"}}`, encodeURIComponent(String(requestParameters['spaceId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a user space
     * Delete user space
     */
    async deleteSpace(requestParameters: DeleteSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSpaceRaw(requestParameters, initOverrides);
    }

    /**
     * Gets the users for which a spaceId has permissions to send notification
     * Get users to send notifications
     */
    async getNotificationSpaceUserRaw(requestParameters: GetNotificationSpaceUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleUserOutDTO>> {
        if (requestParameters['spaceId'] == null) {
            throw new runtime.RequiredError(
                'spaceId',
                'Required parameter "spaceId" was null or undefined when calling getNotificationSpaceUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/spaces/{spaceId}/notifications/users`.replace(`{${"spaceId"}}`, encodeURIComponent(String(requestParameters['spaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleUserOutDTOFromJSON(jsonValue));
    }

    /**
     * Gets the users for which a spaceId has permissions to send notification
     * Get users to send notifications
     */
    async getNotificationSpaceUser(requestParameters: GetNotificationSpaceUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleUserOutDTO> {
        const response = await this.getNotificationSpaceUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Take the space from a spaceId
     * Get space
     */
    async getSpaceRaw(requestParameters: GetSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SpaceOutDTO>>> {
        if (requestParameters['spaceId'] == null) {
            throw new runtime.RequiredError(
                'spaceId',
                'Required parameter "spaceId" was null or undefined when calling getSpace().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/spaces/{spaceId}`.replace(`{${"spaceId"}}`, encodeURIComponent(String(requestParameters['spaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SpaceOutDTOFromJSON));
    }

    /**
     * Take the space from a spaceId
     * Get space
     */
    async getSpace(requestParameters: GetSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SpaceOutDTO>> {
        const response = await this.getSpaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all notifications
     * Get notifications
     */
    async getSpaceNotificationRaw(requestParameters: GetSpaceNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationOutDTO>> {
        if (requestParameters['spaceId'] == null) {
            throw new runtime.RequiredError(
                'spaceId',
                'Required parameter "spaceId" was null or undefined when calling getSpaceNotification().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/spaces/{spaceId}/notifications`.replace(`{${"spaceId"}}`, encodeURIComponent(String(requestParameters['spaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationOutDTOFromJSON(jsonValue));
    }

    /**
     * Gets all notifications
     * Get notifications
     */
    async getSpaceNotification(requestParameters: GetSpaceNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationOutDTO> {
        const response = await this.getSpaceNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the facilities of a space
     * Get spaces facilities
     */
    async getSpacesFacilitiesRaw(requestParameters: GetSpacesFacilitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSpacesFacilities200Response>> {
        if (requestParameters['spaceId'] == null) {
            throw new runtime.RequiredError(
                'spaceId',
                'Required parameter "spaceId" was null or undefined when calling getSpacesFacilities().'
            );
        }

        if (requestParameters['paginationDTO'] == null) {
            throw new runtime.RequiredError(
                'paginationDTO',
                'Required parameter "paginationDTO" was null or undefined when calling getSpacesFacilities().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/spaces/{spaceId}/facilities`.replace(`{${"spaceId"}}`, encodeURIComponent(String(requestParameters['spaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: PaginationDTOToJSON(requestParameters['paginationDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSpacesFacilities200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the facilities of a space
     * Get spaces facilities
     */
    async getSpacesFacilities(requestParameters: GetSpacesFacilitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSpacesFacilities200Response> {
        const response = await this.getSpacesFacilitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a user space
     * Update user space
     */
    async updateSpaceRaw(requestParameters: UpdateSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SpaceOutDTO>> {
        if (requestParameters['spaceId'] == null) {
            throw new runtime.RequiredError(
                'spaceId',
                'Required parameter "spaceId" was null or undefined when calling updateSpace().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/spaces/{spaceId}`.replace(`{${"spaceId"}}`, encodeURIComponent(String(requestParameters['spaceId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpaceOutDTOFromJSON(jsonValue));
    }

    /**
     * Update a user space
     * Update user space
     */
    async updateSpace(requestParameters: UpdateSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SpaceOutDTO> {
        const response = await this.updateSpaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
