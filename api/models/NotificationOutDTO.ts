/* tslint:disable */
/* eslint-disable */
/**
 * MiKloud - Customer Web API
 * This api is for the padelfy backend.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: dmartindiaz3@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { NotificationInDTOUsersInner } from './NotificationInDTOUsersInner';
import {
    NotificationInDTOUsersInnerFromJSON,
    NotificationInDTOUsersInnerFromJSONTyped,
    NotificationInDTOUsersInnerToJSON,
} from './NotificationInDTOUsersInner';

/**
 * 
 * @export
 * @interface NotificationOutDTO
 */
export interface NotificationOutDTO {
    /**
     * 
     * @type {string}
     * @memberof NotificationOutDTO
     */
    spaceId?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationOutDTO
     */
    notificationId: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationOutDTO
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationOutDTO
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationOutDTO
     */
    type: NotificationOutDTOTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationOutDTO
     */
    triggerDate?: string;
    /**
     * 
     * @type {Array<NotificationInDTOUsersInner>}
     * @memberof NotificationOutDTO
     */
    users: Array<NotificationInDTOUsersInner>;
}


/**
 * @export
 */
export const NotificationOutDTOTypeEnum = {
    Sms: 'sms',
    Email: 'email',
    App: 'app'
} as const;
export type NotificationOutDTOTypeEnum = typeof NotificationOutDTOTypeEnum[keyof typeof NotificationOutDTOTypeEnum];


/**
 * Check if a given object implements the NotificationOutDTO interface.
 */
export function instanceOfNotificationOutDTO(value: object): value is NotificationOutDTO {
    if (!('notificationId' in value) || value['notificationId'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('users' in value) || value['users'] === undefined) return false;
    return true;
}

export function NotificationOutDTOFromJSON(json: any): NotificationOutDTO {
    return NotificationOutDTOFromJSONTyped(json, false);
}

export function NotificationOutDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): NotificationOutDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'spaceId': json['spaceId'] == null ? undefined : json['spaceId'],
        'notificationId': json['notificationId'],
        'title': json['title'],
        'description': json['description'],
        'type': json['type'],
        'triggerDate': json['triggerDate'] == null ? undefined : json['triggerDate'],
        'users': ((json['users'] as Array<any>).map(NotificationInDTOUsersInnerFromJSON)),
    };
}

export function NotificationOutDTOToJSON(value?: NotificationOutDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'spaceId': value['spaceId'],
        'notificationId': value['notificationId'],
        'title': value['title'],
        'description': value['description'],
        'type': value['type'],
        'triggerDate': value['triggerDate'],
        'users': ((value['users'] as Array<any>).map(NotificationInDTOUsersInnerToJSON)),
    };
}

